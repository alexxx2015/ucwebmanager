/*
This class handles instrumentation of the analysed file which is produced by the static analysis phase. It takes the report
file generated by the static analysis and instrument it.
 */

package com.example.mysampleapp;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;

import javax.servlet.ServletContext;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.vaadin.annotations.Theme;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.VaadinServlet;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.MenuBar;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
// @Theme("mysampleap1p")
public class Instrumentation extends VerticalLayout implements View {

	MysampleappUI mainObj;
	static String filename, applicationfolder;
	String reportfilepath, strBaseFolders;
	String appfolder, Instrumentationpath;
	TextArea textstaticanalysis;
	ComboBox cmbselectreportfile;
	Properties prop = new Properties();
	String propFileName = "Config.properties";//
	InputStream inputStream = getClass().getClassLoader().getResourceAsStream(
			propFileName);

	public Instrumentation(MysampleappUI objmain) {
		try {
			prop.load(inputStream);
			strBaseFolders = prop.getProperty("BaseFolders");
			System.out.println("value of strBaseFolders is " + strBaseFolders);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		ServletContext serv = VaadinServlet.getCurrent().getServletContext();
		String PropertFilePath = serv.getInitParameter(Main.CONFIG_PROP);
		// appfolder=new File("").getAbsolutePath();
		appfolder = VaadinServlet.getCurrent().getServletContext()
				.getRealPath("/");
		System.out.println("value of reportpath is " + reportfilepath);
		mainObj = objmain;

		setSizeFull();
		setMargin(true);
		Label lblwelcome = new Label("Instrumentation");
		lblwelcome.setStyleName("labelwelcome");
		addStyleName("backColorGrey");
		textstaticanalysis = new TextArea();
		textstaticanalysis.setHeight(10.0f, ComboBox.UNITS_EM);
		cmbselectreportfile = new ComboBox("Select Report File");
		// cmbselectreportfile.setSizeFull();
		textstaticanalysis.setRows(100);
		textstaticanalysis.setSizeFull();

		Button btnprev = new Button("Prev");
		Button btnnext = new Button("Next");
		this.setCaption("Instrumentation Page");
		//
		MenuBar barmenu = new MenuBar();
		barmenu.addItem("Home", new MenuBar.Command() {
			public void menuSelected(MenuBar.MenuItem selectedItem) {
				mainObj.navigator.navigateTo("");
			}
		});
		barmenu.addItem("Static Analysis", new MenuBar.Command() {
			public void menuSelected(MenuBar.MenuItem selectedItem) {
				mainObj.navigator.navigateTo("Main");
			}
		});
		barmenu.addItem("Instrumentation", new MenuBar.Command() {
			public void menuSelected(MenuBar.MenuItem selectedItem) {
				mainObj.navigator.navigateTo("Instrumentation");
			}
		});
		barmenu.addItem("runtime Analysis", new MenuBar.Command() {
			public void menuSelected(MenuBar.MenuItem selectedItem) {
				mainObj.navigator.navigateTo("Runtime");
			}
		});
		// this.setSpacing(false);

		HorizontalLayout hlayoutmenu = new HorizontalLayout();
		hlayoutmenu.setSpacing(true);

		hlayoutmenu.addComponent(barmenu);

		hlayoutmenu.setComponentAlignment(barmenu, Alignment.TOP_CENTER);

		addComponent(hlayoutmenu);
		this.setComponentAlignment(hlayoutmenu, Alignment.TOP_CENTER);
		//

		try {
			Properties prop = new Properties();

			String propFileName = "Config.properties";

			InputStream inputStream = getClass().getClassLoader()
					.getResourceAsStream(propFileName);
			prop.load(inputStream);
			Instrumentationpath = prop.getProperty("InstrumentationPath");

			textstaticanalysis.setValue(reportfilepath);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// Button btninstrument=new Button("Instrument");
		Button btninstrument = new Button("Instrument",
				new Button.ClickListener() {

					@Override
					public void buttonClick(ClickEvent event) {
						createDirectory(filename);
					}
				});
		cmbselectreportfile
				.addValueChangeListener(new Property.ValueChangeListener() {

					public void valueChange(ValueChangeEvent event) {
						if (cmbselectreportfile.getValue() != null) {
							String[] temparray = cmbselectreportfile.getValue()
									.toString().split(" ");
							reportfilepath = fillStaticAnalysisTextboxes(temparray[0]);
							// String
							// reportfilepathlocal=applicationfolder+"/"+temparray[0]+"/test.report";

							String content = "";
							try {
								if (new File(reportfilepath).exists()) {
									content = new Scanner(new File(
											reportfilepath), "UTF-8")
											.useDelimiter("\\A").next();
								} else
									content = "There is no report file or the name of the report file is different than test.report ";

							} catch (FileNotFoundException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							textstaticanalysis.setValue(content);
						}
					}

				});
		btnprev.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				mainObj.navigator.navigateTo("");
			}
		});
		cmbselectreportfile.setWidth(textstaticanalysis.getWidth(),
				textstaticanalysis.getWidthUnits());
		addComponent(cmbselectreportfile);
		addComponent(textstaticanalysis);
		addComponent(btninstrument);
		this.setStyleName("NoSpacing");
		this.setSizeFull();

	}

	protected void createDirectory(String Name) {
		File directory = new File(Instrumentationpath);
		// File directory = new
		// File("C:\\Users\\subash\\Documents\\HiwiApp\\App1");
		try {
			if (!directory.exists()) {
				if (directory.mkdirs()) {
					System.out.println("Directory is created!");

				} else {
					System.out
							.println("Failed to create directory! which is ::"
									+ Instrumentationpath + Name);
				}
			}

			String date = new SimpleDateFormat("dd-MM-yyyy HH-mm-ss")
					.format(new Date());
			Files.write(
					Paths.get(Instrumentationpath + "/" + Name + date + ".txt"),
					"sample".getBytes());
			// File.createTempFile(Name+date, ".txt", directory) ;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			// e.printStackTrace();
			System.out.println(e.getMessage());
		}
	}

	@Override
	public void enter(ViewChangeEvent event) {
		if (event.getParameters() != null) {
			// split at "/", add each part as a label
			String[] msgs = event.getParameters().split("/");
			String content = "";
			for (String msg : msgs) {
				filename = msg;

			}

			File appFolder = new File(appfolder + strBaseFolders + filename);
			applicationfolder = appfolder + strBaseFolders + filename;
			String[] names = appFolder.list();
			File[] folderlist = appFolder.listFiles();

			List<String> listReportfiles = new ArrayList<>();
			List<File> listReportfiles1 = new ArrayList<>();
			if (filename != null) {
				for (File name : folderlist) {
					if (name.isDirectory()) {
						String temp = name.getName();
						String temp1 = temp;
						if (!(temp.equals("Source")))
							listReportfiles1.add(name);

					}
				}
				Collections.sort(listReportfiles1, new Comparator<File>() {
					public int compare(File f1, File f2) {
						return Long.valueOf(f2.lastModified()).compareTo(
								f1.lastModified());
					}
				});
			}
			reportfilepath = fillStaticAnalysisTextboxes(filename);

			try {
				if (new File(reportfilepath).exists()) {
					content = new Scanner(new File(reportfilepath), "UTF-8")
							.useDelimiter("\\A").next();
				} else
					content = "There is no report file or the name of the report file is different than test.report ";
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			for (File name : listReportfiles1) {
				listReportfiles.add(name.getName() + " Analysed in "
						+ new Date(name.lastModified()).toString());
			}
			if (!listReportfiles.isEmpty()) {
				cmbselectreportfile.removeAllItems();
				cmbselectreportfile.addItems(listReportfiles);
				cmbselectreportfile.select(listReportfiles.get(0));
			}
			textstaticanalysis.setValue(content);
		}

		// TODO Auto-generated method stub

	}

	private String fillStaticAnalysisTextboxes(String Appname) {
		String reportfile = "";
		DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory
				.newInstance();
		DocumentBuilder docBuilder;
		try {
			docBuilder = docBuilderFactory.newDocumentBuilder();
			File appFolder = new File(appfolder + strBaseFolders + Appname);
			String applicationfolder = appfolder + strBaseFolders + Appname;
			String[] names = appFolder.list();
			File[] folderlist = appFolder.listFiles();

			List<String> listReportfiles = new ArrayList<>();
			List<File> listReportfiles1 = new ArrayList<>();
			if (Appname != null) {
				for (File name : folderlist) {
					if (name.isDirectory()) {
						String temp = name.getName();
						String temp1 = temp;
						if (!(temp.equals("Source")))
							listReportfiles1.add(name);

					}
				}
				Collections.sort(listReportfiles1, new Comparator<File>() {
					public int compare(File f1, File f2) {
						return Long.valueOf(f2.lastModified()).compareTo(
								f1.lastModified());
					}
				});
			}
			String reportfilepathtmp = listReportfiles1.get(0)
					.getAbsolutePath() + "/StaticAnalysis.xml";

			Document doc = docBuilder.parse(new File(reportfilepathtmp));
			doc.getDocumentElement().normalize();

			NodeList listOffile = doc.getElementsByTagName("analysis");
			Element AppNameElement = (Element) listOffile.item(0);

			int totalFile = listOffile.getLength();

			for (int s = 0; s < listOffile.getLength(); s++) {

				Node FileNode = listOffile.item(s);
				if (FileNode.getNodeType() == Node.ELEMENT_NODE) {

					Element FileElement = (Element) FileNode;

					NodeList reportList = FileElement
							.getElementsByTagName("reportfile");
					Element reportElement = (Element) reportList.item(0);

					reportfile = listReportfiles1.get(0).getAbsolutePath()
							+ "/" + reportElement.getAttribute("value");

				}

			}

		}

		catch (ParserConfigurationException | SAXException | IOException e) {
			System.out.println(e.getLocalizedMessage() + e.getMessage());
		}
		return reportfile;
	}

}
